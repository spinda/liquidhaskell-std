{-# OPTIONS_GHC -sig-of ghc-prim:GHC.Classes #-}

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE QuasiQuotes #-}

module Liquid.GHC.Classes (module GHC.Classes) where

import LiquidHaskell

import GHC.Classes

import Liquid.GHC.Prim
import Liquid.GHC.Types

[lq| not     ::          x:Bool ->           {v:Bool | v <=> ~x}     |]
[lq| (&&)    ::          x:Bool -> y:Bool -> {v:Bool | v <=> x && y} |]
[lq| (||)    ::          x:Bool -> y:Bool -> {v:Bool | v <=> x || y} |]
[lq| (==)    :: Eq  a => x:a    -> y:a    -> {v:Bool | v <=> x =  y} |]
[lq| (/=)    :: Eq  a => x:a    -> y:a    -> {v:Bool | v <=> x != y} |]
[lq| (>)     :: Ord a => x:a    -> y:a    -> {v:Bool | v <=> x >  y} |]
[lq| (>=)    :: Ord a => x:a    -> y:a    -> {v:Bool | v <=> x >= y} |]
[lq| (<)     :: Ord a => x:a    -> y:a    -> {v:Bool | v <=> x <  y} |]
[lq| (<=)    :: Ord a => x:a    -> y:a    -> {v:Bool | v <=> x <= y} |]

[lq| 
compare :: Ord a => x:a -> y:a
        -> {v:Ordering | (v = EQ <=> x = y) &&
                         (v = LT <=> x < y) &&
                         (v = GT <=> x > y) }
|]

[lq| max :: Ord a => x:a -> y:a -> {v:a | v = if x > y then x else y } |]
[lq| min :: Ord a => x:a -> y:a -> {v:a | v = if x < y then x else y } |]

